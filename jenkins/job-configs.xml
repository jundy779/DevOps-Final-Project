<<<<<<< HEAD
 <?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1289">
  <description>Multi-job pipeline for Voting App with separate frontend and backend builds</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.disk__usage.DiskUsageProperty/>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>H/5 * * * *</spec>
        </hudson.triggers.SCMTrigger>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.34.4">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>Branch to build and deploy</description>
          <defaultValue>develop</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>SKIP_TESTS</name>
          <description>Skip running tests</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>SKIP_DEPLOY</name>
          <description>Skip deployment</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>DEPLOY_ENVIRONMENT</name>
          <description>Environment to deploy to</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>staging</string>
              <string>production</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3697">
    <script>
// Multi-job pipeline script
pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'your-registry.com'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        FRONTEND_IMAGE = 'voting-app-frontend'
        BACKEND_IMAGE = 'voting-app-backend'
        BRANCH = "${params.BRANCH}"
        DEPLOY_ENV = "${params.DEPLOY_ENVIRONMENT}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: "${params.BRANCH}"]], 
                    userRemoteConfigs: [[
                        url: 'https://github.com/your-repo/Final-DevOps.git',
                        credentialsId: 'github-credentials'
                    ]]
                ])
            }
        }
        
        stage('Parallel Build & Test') {
            parallel {
                stage('Frontend Pipeline') {
                    agent {
                        docker {
                            image 'node:18-alpine'
                            args '-v /var/run/docker.sock:/var/run/docker.sock'
                        }
                    }
                    stages {
                        stage('Frontend Dependencies') {
                            steps {
                                dir('frontend') {
                                    sh '''
                                        npm install
                                        npm audit --audit-level moderate || echo "Security audit completed"
                                    '''
                                }
                            }
                        }
                        
                        stage('Frontend Tests') {
                            when {
                                not { params.SKIP_TESTS }
                            }
                            steps {
                                dir('frontend') {
                                    sh '''
                                        npm test -- --coverage --watchAll=false
                                    '''
                                }
                            }
                            post {
                                always {
                                    dir('frontend') {
                                        publishHTML([
                                            allowMissing: false,
                                            alwaysLinkToLastBuild: true,
                                            keepAll: true,
                                            reportDir: 'coverage/lcov-report',
                                            reportFiles: 'index.html',
                                            reportName: 'Frontend Coverage Report'
                                        ])
                                    }
                                }
                            }
                        }
                        
                        stage('Frontend Build') {
                            steps {
                                dir('frontend') {
                                    sh '''
                                        npm run build
                                        docker build -t ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG} .
                                        docker tag ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:latest
                                    '''
                                }
                            }
                        }
                    }
                }
                
                stage('Backend Pipeline') {
                    agent {
                        docker {
                            image 'node:18-alpine'
                            args '-v /var/run/docker.sock:/var/run/docker.sock'
                        }
                    }
                    stages {
                        stage('Backend Dependencies') {
                            steps {
                                dir('backend') {
                                    sh '''
                                        npm install
                                        npm audit --audit-level moderate || echo "Security audit completed"
                                    '''
                                }
                            }
                        }
                        
                        stage('Backend Tests') {
                            when {
                                not { params.SKIP_TESTS }
                            }
                            steps {
                                dir('backend') {
                                    sh '''
                                        npm test -- --coverage --watchAll=false
                                    '''
                                }
                            }
                            post {
                                always {
                                    dir('backend') {
                                        publishHTML([
                                            allowMissing: false,
                                            alwaysLinkToLastBuild: true,
                                            keepAll: true,
                                            reportDir: 'coverage/lcov-report',
                                            reportFiles: 'index.html',
                                            reportName: 'Backend Coverage Report'
                                        ])
                                        junit 'test-results/*.xml'
                                    }
                                }
                            }
                        }
                        
                        stage('Backend Build') {
                            steps {
                                dir('backend') {
                                    sh '''
                                        docker build -t ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG} .
                                        docker tag ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:latest
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Push Images') {
            when {
                allOf {
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                    not { params.SKIP_DEPLOY }
                }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-registry', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo $DOCKER_PASS | docker login ${DOCKER_REGISTRY} -u $DOCKER_USER --password-stdin
                            
                            # Push Frontend Image
                            docker push ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG}
                            docker push ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:latest
                            
                            # Push Backend Image
                            docker push ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG}
                            docker push ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:latest
                        '''
                    }
                }
            }
        }
        
        stage('Deploy') {
            when {
                allOf {
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                    not { params.SKIP_DEPLOY }
                }
            }
            steps {
                script {
                    def namespace = (params.DEPLOY_ENVIRONMENT == 'production') ? 'voting-app' : 'voting-app-staging'
                    
                    sh """
                        # Deploy Backend first
                        kubectl set image deployment/backend backend=${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG} -n ${namespace}
                        kubectl rollout status deployment/backend -n ${namespace}
                        
                        # Wait for backend to be ready
                        kubectl wait --for=condition=ready pod -l app=backend -n ${namespace} --timeout=300s
                        
                        # Deploy Frontend
                        kubectl set image deployment/frontend frontend=${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG} -n ${namespace}
                        kubectl rollout status deployment/frontend -n ${namespace}
                    """
                }
            }
        }
        
        stage('Integration Tests') {
            when {
                allOf {
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                    not { params.SKIP_TESTS }
                    not { params.SKIP_DEPLOY }
                }
            }
            steps {
                script {
                    def namespace = (params.DEPLOY_ENVIRONMENT == 'production') ? 'voting-app' : 'voting-app-staging'
                    
                    sh """
                        # Wait for all services to be ready
                        kubectl wait --for=condition=ready pod -l app=backend -n ${namespace} --timeout=300s
                        kubectl wait --for=condition=ready pod -l app=frontend -n ${namespace} --timeout=300s
                        
                        # Test Backend API
                        kubectl run test-backend --image=curlimages/curl -n ${namespace} --rm -i --restart=Never -- \\
                            curl -f http://backend-service:8000/health
                        
                        # Test Frontend
                        kubectl run test-frontend --image=curlimages/curl -n ${namespace} --rm -i --restart=Never -- \\
                            curl -f http://frontend-service:80
                        
                        # Test API Integration
                        kubectl run test-api --image=curlimages/curl -n ${namespace} --rm -i --restart=Never -- \\
                            curl -f http://backend-service:8000/api/votes
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo '🎉 Multi-job pipeline completed successfully!'
            script {
                if (params.DEPLOY_ENVIRONMENT == 'production') {
                    echo '🚀 Application deployed to production!'
                } else {
                    echo '🧪 Application deployed to staging!'
                }
            }
        }
        failure {
            echo '❌ Multi-job pipeline failed!'
        }
        cleanup {
            sh '''
                # Cleanup test pods
                kubectl delete pod test-backend -n voting-app-staging --ignore-not-found=true
                kubectl delete pod test-frontend -n voting-app-staging --ignore-not-found=true
                kubectl delete pod test-api -n voting-app-staging --ignore-not-found=true
                kubectl delete pod test-backend -n voting-app --ignore-not-found=true
                kubectl delete pod test-frontend -n voting-app --ignore-not-found=true
                kubectl delete pod test-api -n voting-app --ignore-not-found=true
            '''
        }
    }
}
    </script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
=======
 <?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1289">
  <description>Multi-job pipeline for Voting App with separate frontend and backend builds</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.disk__usage.DiskUsageProperty/>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>H/5 * * * *</spec>
        </hudson.triggers.SCMTrigger>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.34.4">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>Branch to build and deploy</description>
          <defaultValue>develop</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>SKIP_TESTS</name>
          <description>Skip running tests</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>SKIP_DEPLOY</name>
          <description>Skip deployment</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>DEPLOY_ENVIRONMENT</name>
          <description>Environment to deploy to</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>staging</string>
              <string>production</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3697">
    <script>
// Multi-job pipeline script
pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'your-registry.com'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        FRONTEND_IMAGE = 'voting-app-frontend'
        BACKEND_IMAGE = 'voting-app-backend'
        BRANCH = "${params.BRANCH}"
        DEPLOY_ENV = "${params.DEPLOY_ENVIRONMENT}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: "${params.BRANCH}"]], 
                    userRemoteConfigs: [[
                        url: 'https://github.com/your-repo/Final-DevOps.git',
                        credentialsId: 'github-credentials'
                    ]]
                ])
            }
        }
        
        stage('Parallel Build & Test') {
            parallel {
                stage('Frontend Pipeline') {
                    agent {
                        docker {
                            image 'node:18-alpine'
                            args '-v /var/run/docker.sock:/var/run/docker.sock'
                        }
                    }
                    stages {
                        stage('Frontend Dependencies') {
                            steps {
                                dir('frontend') {
                                    sh '''
                                        npm install
                                        npm audit --audit-level moderate || echo "Security audit completed"
                                    '''
                                }
                            }
                        }
                        
                        stage('Frontend Tests') {
                            when {
                                not { params.SKIP_TESTS }
                            }
                            steps {
                                dir('frontend') {
                                    sh '''
                                        npm test -- --coverage --watchAll=false
                                    '''
                                }
                            }
                            post {
                                always {
                                    dir('frontend') {
                                        publishHTML([
                                            allowMissing: false,
                                            alwaysLinkToLastBuild: true,
                                            keepAll: true,
                                            reportDir: 'coverage/lcov-report',
                                            reportFiles: 'index.html',
                                            reportName: 'Frontend Coverage Report'
                                        ])
                                    }
                                }
                            }
                        }
                        
                        stage('Frontend Build') {
                            steps {
                                dir('frontend') {
                                    sh '''
                                        npm run build
                                        docker build -t ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG} .
                                        docker tag ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:latest
                                    '''
                                }
                            }
                        }
                    }
                }
                
                stage('Backend Pipeline') {
                    agent {
                        docker {
                            image 'node:18-alpine'
                            args '-v /var/run/docker.sock:/var/run/docker.sock'
                        }
                    }
                    stages {
                        stage('Backend Dependencies') {
                            steps {
                                dir('backend') {
                                    sh '''
                                        npm install
                                        npm audit --audit-level moderate || echo "Security audit completed"
                                    '''
                                }
                            }
                        }
                        
                        stage('Backend Tests') {
                            when {
                                not { params.SKIP_TESTS }
                            }
                            steps {
                                dir('backend') {
                                    sh '''
                                        npm test -- --coverage --watchAll=false
                                    '''
                                }
                            }
                            post {
                                always {
                                    dir('backend') {
                                        publishHTML([
                                            allowMissing: false,
                                            alwaysLinkToLastBuild: true,
                                            keepAll: true,
                                            reportDir: 'coverage/lcov-report',
                                            reportFiles: 'index.html',
                                            reportName: 'Backend Coverage Report'
                                        ])
                                        junit 'test-results/*.xml'
                                    }
                                }
                            }
                        }
                        
                        stage('Backend Build') {
                            steps {
                                dir('backend') {
                                    sh '''
                                        docker build -t ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG} .
                                        docker tag ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:latest
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Push Images') {
            when {
                allOf {
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                    not { params.SKIP_DEPLOY }
                }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-registry', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo $DOCKER_PASS | docker login ${DOCKER_REGISTRY} -u $DOCKER_USER --password-stdin
                            
                            # Push Frontend Image
                            docker push ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG}
                            docker push ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:latest
                            
                            # Push Backend Image
                            docker push ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG}
                            docker push ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:latest
                        '''
                    }
                }
            }
        }
        
        stage('Deploy') {
            when {
                allOf {
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                    not { params.SKIP_DEPLOY }
                }
            }
            steps {
                script {
                    def namespace = (params.DEPLOY_ENVIRONMENT == 'production') ? 'voting-app' : 'voting-app-staging'
                    
                    sh """
                        # Deploy Backend first
                        kubectl set image deployment/backend backend=${DOCKER_REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG} -n ${namespace}
                        kubectl rollout status deployment/backend -n ${namespace}
                        
                        # Wait for backend to be ready
                        kubectl wait --for=condition=ready pod -l app=backend -n ${namespace} --timeout=300s
                        
                        # Deploy Frontend
                        kubectl set image deployment/frontend frontend=${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG} -n ${namespace}
                        kubectl rollout status deployment/frontend -n ${namespace}
                    """
                }
            }
        }
        
        stage('Integration Tests') {
            when {
                allOf {
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                    not { params.SKIP_TESTS }
                    not { params.SKIP_DEPLOY }
                }
            }
            steps {
                script {
                    def namespace = (params.DEPLOY_ENVIRONMENT == 'production') ? 'voting-app' : 'voting-app-staging'
                    
                    sh """
                        # Wait for all services to be ready
                        kubectl wait --for=condition=ready pod -l app=backend -n ${namespace} --timeout=300s
                        kubectl wait --for=condition=ready pod -l app=frontend -n ${namespace} --timeout=300s
                        
                        # Test Backend API
                        kubectl run test-backend --image=curlimages/curl -n ${namespace} --rm -i --restart=Never -- \\
                            curl -f http://backend-service:8000/health
                        
                        # Test Frontend
                        kubectl run test-frontend --image=curlimages/curl -n ${namespace} --rm -i --restart=Never -- \\
                            curl -f http://frontend-service:80
                        
                        # Test API Integration
                        kubectl run test-api --image=curlimages/curl -n ${namespace} --rm -i --restart=Never -- \\
                            curl -f http://backend-service:8000/api/votes
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo '🎉 Multi-job pipeline completed successfully!'
            script {
                if (params.DEPLOY_ENVIRONMENT == 'production') {
                    echo '🚀 Application deployed to production!'
                } else {
                    echo '🧪 Application deployed to staging!'
                }
            }
        }
        failure {
            echo '❌ Multi-job pipeline failed!'
        }
        cleanup {
            sh '''
                # Cleanup test pods
                kubectl delete pod test-backend -n voting-app-staging --ignore-not-found=true
                kubectl delete pod test-frontend -n voting-app-staging --ignore-not-found=true
                kubectl delete pod test-api -n voting-app-staging --ignore-not-found=true
                kubectl delete pod test-backend -n voting-app --ignore-not-found=true
                kubectl delete pod test-frontend -n voting-app --ignore-not-found=true
                kubectl delete pod test-api -n voting-app --ignore-not-found=true
            '''
        }
    }
}
    </script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
>>>>>>> 5eec687 (Add Jenkinsfile for CI/CD)
</flow-definition>